
/**
 * Override a tab group's tab bar on iOS.
 *
 * NOTE: Call this function on a tabGroup AFTER you have added all of your tabs to it! We'll look at the tabs that exist
 * to generate the overriding tab bar view. If your tabs change, call this function again and we'll update the display.
 *
 * @param tabGroup The tab group to override
 * @param backgroundOptions The options for the background view; use properties like backgroundColor, or backgroundImage.
 * @param selectedOptions The options for a selected tab button.
 * @param deselectedOptions The options for a deselected tab button.
 * 
 */

var util = require('overrideTabs');


if(OS_IOS){
util.overrideTabs(
		
    $.index, // The tab group
    { backgroundColor: '#e28833' }, // View parameters for the background
    { backgroundColor: '#e25533', color: '#fff', style: 0 }, // View parameters for selected tabs 
    { backgroundColor: '#e28833', color: '#fff', style: 0 } // View parameters for deselected tabs
);
};

/**
 * Global Navigation Handler
 */
Alloy.Globals.Navigator = {

	/**
	 * Handle to the Navigation Controller
	 */
	navGroup: $.index,

	open: function(controller, payload){
		var win = Alloy.createController(controller, payload || {}).getView();

		if(OS_IOS){
			$.index.activeTab.open(win);
			//tabGroup.remove(tabGroup.overrideTabs);
			$.index.overrideTabs.hide();
			//$.index.remove($.index.overrideTabs);
			win.addEventListener('close',function(evt){
				//$.index.add($.index.overrideTabs);
				$.index.overrideTabs.show();
				
			});
	
		
		}
		else if(OS_MOBILEWEB){
				$.index.activeTab.open(win);
		}
		else {

			// added this property to the payload to know if the window is a child
			if (payload.displayHomeAsUp){

				win.addEventListener('open',function(evt){
					var activity=win.activity;	
					activity.actionBar.displayHomeAsUp=payload.displayHomeAsUp;
					activity.actionBar.onHomeIconItemSelected=function(){
						evt.source.close();
					};
					
				});
			}
			win.open();
		}   
	} 
};





if (OS_ANDROID) {
	


Alloy.Globals.tabGroup=$.index;
Alloy.Globals.currentTab=0; 

function doopen(evt){
	var activity = evt.source.getActivity();

	activity.onCreateOptionsMenu = function(e) {
		var item, menu;
		menu = e.menu;
		menu.clear();
		
		switch(Alloy.Globals.currentTab){
			case 0:
		
				 
				break;
			case 1:
			
			// Use action bar search view
                var search = Ti.UI.Android.createSearchView({
                 hintText: "Zoek"
                 });
				
			
				item1 = menu.add({
                       title: 'Table Search',
                       actionView : search,
                       icon: (Ti.Android.R.drawable.ic_menu_search ? Ti.Android.R.drawable.ic_menu_search : "my_search.png"),
                       showAsAction: Ti.Android.SHOW_AS_ACTION_IF_ROOM | Ti.Android.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
    });
				
				
				search.addEventListener("change", function(e) {			
							
						Ti.App.fireEvent("onSearchChange", e);
							
				}); 
			
				
				item2 = e.menu.add({
					title : "Favorite",
					showAsAction : Ti.Android.SHOW_AS_ACTION_ALWAYS,
					icon : 'favorite.png'
				});
				item2.addEventListener("click", function(e) {					
					Alloy.Globals.Navigator.open("notificatielijst", {restrictToFavorites:true, title:"Favorites", displayHomeAsUp:true});
				});
				
				item3 = e.menu.add({
					title : "Refresh",
					showAsAction : Ti.Android.SHOW_AS_ACTION_ALWAYS,
					icon : 'refresh.png'
				});
				item3.addEventListener("click", function(e) {					
						Ti.App.fireEvent("androidRefresh", e);
				});
				
				
				
				
				
				
				
				break;
		}
	};

	Alloy.Globals.tabGroup.addEventListener("focus", function(evt) {
		if (typeof evt.index !== "undefined"){
			activity.invalidateOptionsMenu();
			Alloy.Globals.currentTab=evt.index;	
		} 
	});
}
}




var pushnotifications = require('com.pushwoosh.module');
Ti.API.info("module is => " + pushnotifications);
     
pushnotifications.pushNotificationsRegister({
    "pw_appid": "5CA68-8E3D5",
    "gcm_projectid": "262947631278",
    success:function(e)
    {
        setTimeout(function() {
            Ti.API.info('JS registration success event: ' + e.registrationId);
        }, 0);
            e.registrationId == $device_id;
    },
    error:function(e)
    {
        setTimeout(function() {
            Ti.API.error("Error during registration: "+e.error);
        }, 0);
    },
    callback:function(e) // called when a push notification is received
    {
        setTimeout(function() {
            //push notifications title: e.data.aps.alert
            Ti.API.info('JS message event: ' + JSON.stringify(e.data));
        }, 0);
    }
});




function geolocation(e) {

	// Let's include some related properties for iOS we already had
	if (OS_IOS) {

		// Available since Ti 5.0
		log.args('Ti.Geolocation.allowsBackgroundLocationUpdates', Ti.Geolocation.allowsBackgroundLocationUpdates);

		// Available since Ti 0.x,
		// Always returns true on Android>2.2
		log.args('Ti.Geolocation.locationServicesEnabled', Ti.Geolocation.locationServicesEnabled);
	}

	// The new cross-platform way to check permissions
	// The first argument is required on iOS and ignored on other platforms
	var hasLocationPermissions = Ti.Geolocation.hasLocationPermissions(Ti.Geolocation.AUTHORIZATION_ALWAYS);
	log.args('Ti.Geolocation.hasLocationPermissions', hasLocationPermissions);

	if (hasLocationPermissions) {
		return alert('You already have permission.');
	}

	// On iOS we can get information on the reason why we might not have permission
	if (OS_IOS) {

		// Map constants to names
		var map = {};
		map[Ti.Geolocation.AUTHORIZATION_ALWAYS] = 'AUTHORIZATION_ALWAYS';
		map[Ti.Geolocation.AUTHORIZATION_AUTHORIZED] = 'AUTHORIZATION_AUTHORIZED';
		map[Ti.Geolocation.AUTHORIZATION_DENIED] = 'AUTHORIZATION_DENIED';
		map[Ti.Geolocation.AUTHORIZATION_RESTRICTED] = 'AUTHORIZATION_RESTRICTED';
		map[Ti.Geolocation.AUTHORIZATION_UNKNOWN] = 'AUTHORIZATION_UNKNOWN';
		map[Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE] = 'AUTHORIZATION_WHEN_IN_USE';

		// Available since Ti 0.8 for iOS and Ti 4.1 for Windows
		// Always returns AUTHORIZATION_UNKNOWN on iOS<4.2
		var locationServicesAuthorization = Ti.Geolocation.locationServicesAuthorization;
		log.args('Ti.Geolocation.locationServicesAuthorization', 'Ti.Geolocation.' + map[locationServicesAuthorization]);

		if (locationServicesAuthorization === Ti.Geolocation.AUTHORIZATION_RESTRICTED) {
			return alert('Because permission are restricted by some policy which you as user cannot change, we don\'t request as that might also cause issues.');

		} else if (locationServicesAuthorization === Ti.Calendar.AUTHORIZATION_DENIED) {
			return dialogs.confirm({
				title: 'You denied permission before',
				message: 'We don\'t request again as that won\'t show the dialog anyway. Instead, press Yes to open the Settings App to grant permission there.',
				callback: editPermissions
			});
		}
	}

	// The new cross-platform way to request permissions
	// The first argument is required on iOS and ignored on other platforms
	Ti.Geolocation.requestLocationPermissions(Ti.Geolocation.AUTHORIZATION_ALWAYS, function(e) {
		log.args('Ti.Geolocation.requestLocationPermissions', e);

		if (e.success) {

			// Instead, probably call the same method you call if hasLocationPermissions() is true
			alert('You granted permission.');

		} else if (OS_ANDROID) {
			alert('You denied permission for now, forever or the dialog did not show at all because it you denied forever before.');

		} else {

			// We already check AUTHORIZATION_DENIED earlier so we can be sure it was denied now and not before
			Ti.UI.createAlertDialog({
				title: 'You denied permission.',

				// We also end up here if the NSLocationAlwaysUsageDescription is missing from tiapp.xml in which case e.error will say so
				message: e.error
			}).show();
		}
	});
}


 
$.index.open();
 


 
 





